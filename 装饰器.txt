装饰器：本质就是函数，功能是为其他函数添加附加功能。高阶函数+函数嵌套+闭包。
原则：
1.不修改被修饰函数的源代码
2.不修改被修饰函数的调用方法

高阶函数：
1.函数接收的参数是一个函数名
2.函数返回的是一个函数名
（满足上述条件的任意一个就是高阶函数）

下面的代码将展示装饰器如何使用：@timmer
import time
def timmer(func):
	def wrappper():
		print(func)
		func()
	return wrappper

@timmer
def test():
	time.sleep(3)
	print("test函数运行完毕")
test()===<function test at 0x0000018F25AD7B70>  test函数运行完毕

上面@timmer这步操作实际上的意思就是进行test=timmer(test)
这就是装饰器的使用，即在不改变源代码和调用方式（都是使用test这个函数名去调用）的前提下给函数增加新的功能。

（*args，**kwargs）表示可传入任何类型、任意数量的参数。
用法（1，2，3，4，5，6，name=“alex”），print（args，kwrgs）==（1，2，3，4，5，6），{“name”：“alex”}。
也就是说当打印的时候不带*，那么函数会自动将参数转为元组和字典再输出，如果打印的时候带*，传入的第二个参数必须是字典，第一个参数可以是元组也可以是其他。
上面的（1，2，3，4，5，6，name=“alex”）也可以这样写（*（1，2，3，4，5，6），**{“name”=“alex”}）。

