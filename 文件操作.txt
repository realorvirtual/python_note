文件处理流程：（路径，“r，w，r+，a”，encoding=“gbk，utf-8”）
文件的读模式：r
1.f=open(路径，记得写上文件的后缀名，比如文档的.txt),f称为文件句柄。如果在括号里面填入“r，w，a”就会有不同的功能，
比如（路径，“r”）表示只读，w表示只写，a表示读写。
2.date=f.read（）
3.print(date)
4.f.close()

f.readable()判断文件是否可读。True or false。
f.readline()只读一行，且下一次运行readline时会直接读下一行，即不会两次读取同一行。
f.readlines()读出来的是一个列表。
如果readline之前使用了read，那么readline将不起作用，因为read已经把全部文件都读取出来了，即文件的光标移动到了最后一个位置。

文件的写模式：w
注意在此模式下，如果文件不存在，那么系统会新建一个文件，如果文件存在，那么文件就会被清空然后开始写操作。
1.f=open(路径，“w”)
2.f.write(“内容”)注意：要自己添加换行符\n，文本不会进行换行操作。
3.f.close()

open每次打开文件都要使用close来关闭，而with则不用使用close关闭，系统会自动关闭。
with open（路径，“r,w,a,x”）as f：
	f.write("love you")
with还可以同时打开多个文件：
with open（路径，“r,w,a,x”）as f，open（路径2，“r,w,a,x”）as f2：
当感觉一行太长的时候，可以在第二个open前面加一条\然后进行换行。

f.writable()判断文本是否可写。
f.writelines(列表)，比如["哦","哈"]注意：无论是写文本还是传入列表，都只能是字符串类型，数字都不行，必须是字符串。

x模式：
与w相似的是x，只写模式，不存在文件则创建文件，存在文件则报错。

文件的追加模式：a
不可读，文件不存在就新建文件，文件存在就追加内容，不会清空内容。

文件的r+模式，可读，可写（追加）。文件必须存在，即不会新建文件。


总结：
r只读，r+可读写，文件必须存在。
w只写，w+可读写，文件存在则清空再写，不存在则创建。
a只写，a+可读写，文件存在则追加内容，不存在则创建。
x只写，x+可读写，不存在则创建，存在则报错。

windows中\r\n表示换行，linux中\n表示换行。

二进制与字符串互转：
“字符串”------encode------bytes
bytes------decode------“字符串”
bytes（x，encoding=“utf-8”）x为字符串，将x编码为字节形式。
x.encoding("utf-8")将x编码成字节形式。

f.closed判断f是否关闭，是的话返回true，否则返回false。closed后面没有括号（）。
f.encoding判断打开文件f的编码，前提是使用open函数时，括号里面必须输入encoding=“utf-8”。

f.flush()刷新，比如你在内存操作，但没有保存到硬盘，使用这个函数可以进行保存（刷新操作）。

f.tell()返回光标所在位置，光标的移动单位为字节。

在windows平台中换行为\r\n，但是在使用python时，它会自动把所用的换行符都读为\n，如果想让读出来的结果更准确，可以这么做：
open（路径，“r”，encoding=“”，newline=“”）关键在于最后一个参数，它会让python不转换换行符，也就是保持原来的\r\n。

f.seek(6)控制光标的移动，6表示光标目前在第六个字节的位置。f.seek(6,0或1)第二个参数填入0或者1，0表示默认从第0个位置开始数，1表示从当前光标的位置开始数，当选择1时，open函数里面必须使用“rb”（“ab”也行），即以二进制格式打开文件。
f.seek(-5，2)光标从后面开始读取，即反向读取，前面是负数的话，后面必须填2，同样，open函数里面必须加上b。

f.read(5)读取5个字符，注意，是字符不是字节。

f.truncate(10)截取文件的前十个字节，即保留前十个字节，后面的内容会被删除。










