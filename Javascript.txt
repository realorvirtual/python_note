JavaScript:
代码写在body的<script></script>里面。
定义变量时使用var x=，要是不加var，那么定义的变量为全局变量。

代码块不再用缩进表示包含，而是用{}。
例如 if（条件）{  }

定义函数function f（）{  }
执行函数function（）

null为空对象，typeof null -----object
列表、字典等统统称为对象object。

强制类型转换
parseInt() ----------整型
parseInt(12.121212) --------12
parseInt("hello") ------------NAN ---not a number
parseInt("123abc") ----------123
parseInt("abc123") -----------NAN

parseFloat() --------浮点型

i++：先输出后计算
++i：先计算后输出


-------------------------------------------------------------------------------------------------------------
ECMAScript等性运算符 ==
执行类型转换的规则如下：
如果一个运算数是 Boolean 值，在检查相等性之前，把它转换成数字值。false 转换成 0，true 为 1。 
如果一个运算数是字符串，另一个是数字，在检查相等性之前，要尝试把字符串转换成数字。 
如果一个运算数是对象，另一个是字符串，在检查相等性之前，要尝试把对象转换成字符串。 
如果一个运算数是对象，另一个是数字，在检查相等性之前，要尝试把对象转换成数字。 
在比较时，该运算符还遵守下列规则：
值 null 和 undefined 相等。 
在检查相等性时，不能把 null 和 undefined 转换成其他值。 
如果某个运算数是 NaN，等号将返回 false，非等号将返回 true。 
如果两个运算数都是对象，那么比较的是它们的引用值。如果两个运算数指向同一对象，那么等号返回 true，否则两个运算数不等。 
NAN只要参与比较，布尔值一定是false，除非！=，例如var n=NAN,  n==NAN ------false;  var n=123,  n!=NAN ------true。
2=="2" ------true，"2"会进行转换，==是不完全等。
2==="2" ----false，===是完全等。


-------------------------------------------------------------------------------------------------------------
ECMAScript 关系运算符< >
var bResult = "Blue" < "alpha";
alert(bResult); //输出 true　　
在上面的例子中，字符串 "Blue" 小于 "alpha"，因为字母 B 的字符代码是 66，字母 a 的字符代码是 97。

比较数字和字符串
另一种棘手的状况发生在比较两个字符串形式的数字时，比如：
var bResult = "25" < "3";
alert(bResult); //输出 "true"
上面这段代码比较的是字符串 "25" 和 "3"。两个运算数都是字符串，所以比较的是它们的字符代码（"2" 的字符代码是 50，"3" 的字符代码是 51）。

如果把某个运算数改为数字，那么结果就有趣了：
var bResult = "25" < 3;
alert(bResult); //输出 "false"
这里，字符串 "25" 将会被转换成数字 25，然后再与数字 3 进行比较。

总结：
比较运算符两侧如果一个是数字类型,一个是其他类型,会将其他类型转换成数字类型再进行比较。
比较运算符两侧如果都是字符串类型,比较的是最高位的asc码,如果最高位相等,继续取第二位进行比较。


-------------------------------------------------------------------------------------------------------------
判断语句：
switch（value）{
case value1：函数；break；-------------------判断value1是否等于value，相等的话执行后边的函数。如果不加break的话，函数将会继续往下执行，直到遇到break。
case value2：函数；break；
case value3：函数；break；
case value4：函数；break；
default：函数；---------------------------------如果所有value都不满足条件，就会执行default后面的函数。


-------------------------------------------------------------------------------------------------------------
for循环：
for（var i=0；i<10；i++）
{
	document.write("hello"-i-"<br>")
}

attr=[1,2,3]
for (i in attr)
{
	document.write(i) --------------0, 1, 2, 里面的i是attr里面元素的位置。
}


-------------------------------------------------------------------------------------------------------------
while循环：
while（条件）
{
	函数；
}


-------------------------------------------------------------------------------------------------------------
异常处理：
try {
    //这段代码从上往下运行，其中任何一个语句抛出异常该代码块就结束运行
       throw Error("define error")；---------主动抛出异常throw Error('xxxx')。
}
catch (e) {
    // 如果try代码块中抛出了异常，catch代码块中的代码就会被执行。
    //e是一个局部变量，用来指向Error对象或者其他抛出的对象
}
finally {
     //无论try中代码是否有异常抛出（甚至是try代码块中有return语句），finally代码块中始终会被执行。


-------------------------------------------------------------------------------------------------------------
11种内置对象
包括：
Array数组对象 , String字符串对象 , Date日期对象 ,  Math数学对象 ,  Boolean布尔值对象 ,  Number数字对象 ,  Function函数对象 ,  Global全局对象 ,  Error错误对象 ,  RegExp正则表达式对象 , Object自定义对象。
在JavaScript中除了null和undefined以外其他的数据类型都被定义成了对象，也可以用创建对象的方法定义变量，
String、Math、Array、Date、RegExp都是JavaScript中重要的内置对象，在JavaScript程序大多数功能都是通过对象实现的。

<script language="javascript">
var aa=Number.MAX_VALUE; 
//利用数字对象获取可表示最大数
var bb=new String("hello JavaScript"); 
//创建字符串对象
var cc=new Date();
//创建日期对象
var dd=new Array("星期一","星期二","星期三","星期四"); 
//数组对象
</script>


-------------------------------------------------------------------------------------------------------------
字符串属性及方法：
str.length --------------字符串长度。

字符串编排方法：
var str="hello world";
alert(str.bold()); -----------<b>hello world</b> -----------返回粗体表示字符串。
alert(str.italics()); ----------<i>hello world</i>
alert(str.anchor()); ---------<a>hello world</a>

字符串大小写转换：
var str1="AbcdEfgh"; 
var str2=str1.toLowerCase();
var str3=str1.toUpperCase();
alert(str2);
//结果为"abcdefgh"
alert(str3);
//结果为"ABCDEFGH"

获取指定字符串：
书写格式
x.charAt(index)
x.charCodeAt(index)
使用注解
x代表字符串对象
index代表字符位置
index从0开始编号
charAt返回index位置的字符
charCodeAt返回index位置的Unicode编码

var str1="welcome to the world of JS! 苑昊";
var str2=str1.charAt(28);
var str3=str1.charCodeAt(28);
alert(str2);
//结果为"苑"
alert(str3);
//结果为33489


查询字符串：
x.indexOf(findstr,index)
x.lastIndexOf(findstr)

var str1="welcome to the world of JS!";
var str2=str1.indexOf("l"); -----------从左到右开始寻找，获取l的位置-------2
var str3=str1.lastIndexOf("l"); -------从右到左开始寻找，获取l的位置-------18

x.match(regexp)----------------------regexp为一段字符串，该函数相当于匹配x中的regexp，返回匹配字符串的数组，如果x中没有该字符串，返回一个null。
x.search(regexp)----------------------寻找字符串regexp在x中的位置。
//x代表字符串对象
//regexp代表正则表达式或字符串
//match返回匹配字符串的数组，如果没有匹配则返回null
//search返回匹配字符串的首字符位置索引

var str1="welcome to the world of JS!";
var str2=str1.match("world");
var str3=str1.search("world");
alert(str2[0]);
//结果为"world"
alert(str3);
//结果为15

截取子字符串：
//x.substr(start, length)
//x.substring(start, end)
//x代表字符串对象
//start表示开始位置
//length表示截取长度
//end是结束位置加1，比如end=3，那么取出的数据直到2为止。
//第一个字符位置为0

var str1="abcdefgh";
var str2=str1.substr(2,4);----------2为开始位置，4是长度。
var str3=str1.substring(2,4);--------2为开始位置，4是结束位置，但取出来的数据不包括4。
alert(str2);
//结果为"cdef"
alert(str3);
//结果为"cd"

//x.slice(start, end)
var str1="abcdefgh";
var str2=str1.slice(2,4);-----------2为开始位置，4为结束位置，不取4位置的数据。
var str3=str1.slice(4);-------------从4位置开始取，直到字符串结尾。
var str4=str1.slice(2,-1);
var str5=str1.slice(-3,-1);
alert(str2);
//结果为"cd"
alert(str3);
//结果为"efgh"
alert(str4);
//结果为"cdefg"
alert(str5);
//结果为"fg"

字符串替换：
//x.replace(findstr,tostr)
var str1="abcdefgh";
var str2=str1.replace("cd","aaa");
alert(str2);
//结果为"abaaaefgh"

分割字符串：
var str1="一,二,三,四,五,六,日"; 
var strArray=str1.split(",");
alert(strArray[1]);
//结果为"二"

连接字符串：
y=x.concat(addstr)
//x代表字符串对象
//addstr为添加字符串
//返回x+addstr字符串    
var str1="abcd"; 
var str2=str1.concat("efgh");
alert(str2);
//结果为"abcdefgh"


-----------------------------------------------------------------------------------------------------------------
数组Array：
Array 对象用于在单个的变量中存储多个值。
语法:
创建方式1:
var a=[1,2,3];

创建方式2:
new Array();     //  创建数组时允许指定元素个数也可以不指定元素个数。
new Array(size);//if 1个参数且为数字,即代表size,not content
    初始化数组对象:
    var cnweek=new Array(7);
        cnweek[0]="星期日";
        cnweek[1]="星期一";
        ...
        cnweek[6]="星期六";

new Array(element0, element1, ..., elementn)//也可以直接在建立对象时初始化数组元素，元素类型允许不同
var test=new Array(100,"a",true);

创建二维数组：
var cnweek=new Array(7);
for (var i=0;i<=6;i++){
    cnweek[i]=new Array(2);
}
cnweek[0][0]="星期日";
cnweek[0][1]="Sunday";
cnweek[1][0]="星期一";
cnweek[1][1]="Monday";
...
cnweek[6][0]="星期六";
cnweek[6][1]="Saturday";


---------------------------------------------------------------------------------------------------------------------
Array对象的属性及方法：
Array.length------------------获取数组元素的个数。
toString----------------------无论是什么对象，都会返回该对象的原始字符串。

连接数组join：
x.join(bystr)
//x代表数组对象
//bystr作为连接数组中元素的字符串
//返回连接后的字符串
//与字符串的split功能刚好相反
var arr1=[1, 2, 3, 4, 5, 6, 7];
var str1=arr1.join("-");
alert(str1);
//结果为"1-2-3-4-5-6-7"

连接数组concat（给数组增加内容）：
str=[1,2,3]
str2=str.concat(4,5) -------------------------1,2,3,4,5



数组排序-reverse  sort：
x.reverse()
var arr1=[32, 12, 111, 444];
var arr1=["a","d","f","c"];
arr1.reverse(); --------------------------颠倒数组元素。
alert(arr1.toString());
//结果为444,111,12,32

arr1.sort(); -----------------------------排序数组元素。
alert(arr1.toString());
//结果为111,12,32,444 -----------------按最高位排序。

如果就想按着数字比较呢?
function intSort(a,b){
    if (a>b){
        return 1;//-1
    }
    else if(a<b){
        return -1;//1
    }
    else {
        return 0
    }
}
（该函数简写：function intSort(a,b) { return a-b }  ）
arr.sort(intSort); -------------------------在sort里面加上一个函数intSort，sort就会按照你定义的规则进行排序。



数组切片-slice：
//x.slice(start, end)
//x代表数组对象
//start表示开始位置索引
//end是结束位置下一数组元素索引编号
//第一个数组元素索引为0
//start、end可为负数，-1代表最后一个数组元素
//end省略则相当于从start位置截取以后所有数组元素

var arr1=['a','b','c','d','e','f','g','h'];
var arr2=arr1.slice(2,4);
var arr3=arr1.slice(4);
var arr4=arr1.slice(2,-1);

alert(arr2.toString());
//结果为"c,d" 
alert(arr3.toString());
//结果为"e,f,g,h"
alert(arr4.toString());
//结果为"c,d,e,f,g"



删除子数组：
//x. splice(start, deleteCount, value, ...)
//x代表数组对象
//splice的主要用途是对数组指定位置进行删除和插入
//start表示开始位置索引
//deleteCount删除数组元素的个数
//value表示在删除位置插入的数组元素
//value参数可以省略

var a = [1,2,3,4,5,6,7,8];
a.splice(1,2);
//a变为 [1,4,5,6,7,8]
alert(a.toString());
a.splice(1,1);
 //a变为[1,5,6,7,8]
alert(a.toString());
a.splice(1,0,2,3);
 //a变为[1,2,3,5,6,7,8]
alert(a.toString());



数组的进出栈操作（1）：
//push pop这两个方法模拟的是一个栈操作

//x.push(value, ...)  压栈，在x的末尾位置放进数据。
//x.pop()                弹栈，在x的末尾位置取出数据。     
//x代表数组对象
//value可以为字符串、数字、数组等任何值
//push是将value值添加到数组x的结尾
//pop是将数组x的最后一个元素删除

var arr1=[1,2,3];
arr1.push(4,5);
alert(arr1);
//结果为"1,2,3,4,5"
arr1.push([6,7]);
alert(arr1)
//结果为"1,2,3,4,5,6,7"
arr1.pop();
alert(arr1);
//结果为"1,2,3,4,5"



数组的进出栈操作（2）：
// unshift shift 
//x.unshift(value,...)
//x.shift()
//x代表数组对象
//value可以为字符串、数字、数组等任何值
//unshift是将value值插入到数组x的开始
//shift是将数组x的第一个元素删除

var arr1=[1,2,3];
arr1.unshift(4,5);
alert(arr1);
//结果为"4,5,1,2,3"
arr1. unshift([6,7]);
alert(arr1);
//结果为"6,7,4,5,1,2,3"
arr1.shift();
alert(arr1);
//结果为"4,5,1,2,3"



Function对象：（注意：js的函数加载执行与python不同，它是整体加载完才会执行，所以执行函数放在函数声明上面或下面都可以）
函数的定义：
function 函数名 (参数)
{
    函数体;
    return 返回值;
}
1.可以使用变量、常量或表达式作为函数调用的参数。
2.函数由关键字function定义。
3.函数名的定义规则与标识符一致，大小写是敏感的。
4.返回值必须使用return。

function.length -------------------------------------------返回函数期望的参数个数。

Function 对象也有与所有对象共享的 valueOf() 方法和 toString() 方法。这两个方法返回的都是函数的源代码，在调试时尤其有用。

void方法：
alert(void(fun1(1,2)))

function.
用 Function 类直接创建函数的语法如下：
function 函数名 (参数)
{
    函数体;
    return 返回值;
}
//another way:
var 函数名 = new Function("参数1","参数n","function_body");

函数的内置对象arguments：
无论函数传入多少参数，都会被argument记录下来，argument是一个Array对象。




匿名函数：执行函数必须放在匿名函数声明之前，因为此时的匿名函数相当于一个变量。
// 匿名函数
    var func = function(arg){
        return "tony";
    }

// 匿名函数的应用
    (function(){
        alert("tony");
    } )()

    (function(arg){
        console.log(arg);
    })('123')


-----------------------------------------------------------------------------------------------------------------------------------------
BOM对象：
BOM（浏览器对象模型），可以对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的文本以及执行其他与页面内容不直接相关的动作。

window对象
    所有浏览器都支持 window 对象。
    概念上讲.一个html文档对应一个window对象。
    功能上讲: 控制浏览器窗口的。
    使用上讲: window对象不需要创建对象,直接使用即可。

window方法：
alert()            显示带有一段消息和一个确认按钮的警告框。
confirm()          显示带有一段消息以及确认按钮和取消按钮的对话框。----------------------------------确认时返回true，取消时返回false。
prompt()           显示可提示用户输入的对话框。---------------------------------------------------------让用户输入一段内容。
open("网址")             打开一个新的浏览器窗口或查找一个已命名的窗口。-------------------------------搜索输入的网址。
close()            关闭浏览器窗口。
setInterval(func，1000)      按照指定的周期（以毫秒计）来调用函数或计算表达式。-------------------func为需要执行的函数，1000为每隔1000毫秒后执行一次。一般在前面加上一个f=setInterval，这样的话才能使用clearInterval（f）关掉，且后面func不能带（），不然函数只会执行一次。
clearInterval()    取消由 setInterval() 设置的 timeout。-------------------------------------------------使用方法为clearInterval（f），f=setInterval。
setTimeout()       在指定的毫秒数后调用函数或计算表达式。
clearTimeout()     取消由 setTimeout() 方法设置的 timeout。
scrollTo()         把内容滚动到指定的坐标。


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Date对象的方法：
创建方法：
//方法1：不指定参数
var nowd1=new Date();
alert(nowd1.toLocaleString( ));
//方法2：参数为日期字符串
var nowd2=new Date("2004/3/20 11:12");
alert(nowd2.toLocaleString( ));
var nowd3=new Date("04/03/20 11:12");
alert(nowd3.toLocaleString( ));
//方法3：参数为毫秒数
var nowd3=new Date(5000);
alert(nowd3.toLocaleString( ));
alert(nowd3.toUTCString());

//方法4：参数为年月日小时分钟秒毫秒
var nowd4=new Date(2004,2,20,11,12,0,300);
alert(nowd4.toLocaleString( ));
//毫秒并不直接显示

获取日期和时间：
getDate()                 获取日
getDay ()                 获取星期
getMonth ()               获取月（0-11）
getFullYear ()            获取完整年份
getYear ()                获取年
getHours ()               获取小时
getMinutes ()             获取分钟
getSeconds ()             获取秒
getMilliseconds ()        获取毫秒
getTime ()                返回累计毫秒数(从1970/1/1午夜)
例子：
var date = new Date(); //没有填入任何参数那么就是当前时间
        //2. 获得当前年份
        var year = date.getFullYear();

设置日期和时间：
//setDate(day_of_month)       设置日
//setMonth (month)                 设置月
//setFullYear (year)               设置年
//setHours (hour)         设置小时
//setMinutes (minute)     设置分钟
//setSeconds (second)     设置秒
//setMillliseconds (ms)       设置毫秒(0-999)
//setTime (allms)     设置累计毫秒(从1970/1/1午夜)
    
var x=new Date();
x.setFullYear (1997);    //设置年1997
x.setMonth(7);        //设置月7
x.setDate(1);        //设置日1
x.setHours(5);        //设置小时5
x.setMinutes(12);    //设置分钟12
x.setSeconds(54);    //设置秒54
x.setMilliseconds(230);        //设置毫秒230
document.write(x.toLocaleString( )+"<br>");
//返回1997年8月1日5点12分54秒

x.setTime(870409430000); //设置累计毫秒数
document.write(x.toLocaleString( )+"<br>");
//返回1997年8月1日12点23分50秒

日期和时间的转换:
getTimezoneOffset():8个时区×15度×4分/度=480;
返回本地时间与GMT的时间差，以分钟为单位
toUTCString()
返回国际标准时间字符串
toLocalString()
返回本地格式时间字符串
Date.parse(x)
返回累计毫秒数(从1970/1/1午夜到本地时间)
Date.UTC(x)
返回累计毫秒数(从1970/1/1午夜到国际时间)


-------------------------------------------------------------------------------------------------------------
RegExp对象：
    // 在表单验证时使用该对象验证用户填入的字符串是否符合规则.
    //创建正则对象方式1  参数1 正则表达式  参数2 验证模式  g global / i 忽略大小写. //参数2一般填写g就可以，也有“gi”.
    // 用户名 首字母必须是英文, 除了第一位其他只能是英文数字和_ . 长度最短不能少于6位 最长不能超过12位
    //----------------------------创建方式1
    /* var reg1 = new RegExp("^[a-zA-Z][a-zA-Z0-9_]{5,11}$","g");
    //
    //验证字符串
    var str = "bc123";
    alert(reg1.test(str));// true
    
    //----------------------------创建方式2  /填写正则表达式/匹配模式;
    var reg2 = /^[a-zA-Z][a-zA-Z0-9_]{5,11}$/g;
    
    alert(reg2.test(str));// true
     */
    //-------------------------------正则对象的方法-------------------
        //test方法  ==>  测试一个字符串是否复合 正则规则. 返回值是true 和false.
    
    //-------------------------String 中与正则结合的4个方法------------------.
    // macth search split replace
    var str = "hello world";
    
    //alert(str.match(/o/g)); //查找字符串中 复合正则的 内容.
    //alert(str.search(/h/g));// 0  查找字符串中符合正则表达式的内容位置
    //alert(str.split(/o/g)); // 按照正则表达式对字符串进行切割. 返回数组;
    alert(str.replace(/o/g, "s")); // hells wsrld  对字符串按照正则进行替换.


---------------------------------------------------------------------------------------------------------------------------
Math对象:
    //该对象中的属性方法 和数学有关.
    //Math是内置对象 , 与Global的不同之处是, 在调用时 需要打出 "Math."前缀.
    //属性学习:
    //alert(Math.PI);
    //方法学习:
        //alert(Math.random()); // 获得随机数 0~1 不包括1.
        //alert(Math.round(1.5)); // 四舍五入
        //练习：获取1-100的随机整数，包括1和100
             //var num=Math.random();
            //num=num*10;
            //num=Math.round(num);
            // alert(num)
        //============max  min=========================
        /* alert(Math.max(1,2));// 2
        alert(Math.min(1,2));// 1 */
        //-------------pow--------------------------------
        alert(Math.pow(2,4));// pow 计算参数1 的参数2 次方.
      
abs(x)    返回数的绝对值。
exp(x)    返回 e 的指数。
floor(x)对数进行下舍入。
log(x)    返回数的自然对数（底为e）。
max(x,y)    返回 x 和 y 中的最高值。
min(x,y)    返回 x 和 y 中的最低值。
pow(x,y)    返回 x 的 y 次幂。
random()    返回 0 ~ 1 之间的随机数。
round(x)    把数四舍五入为最接近的整数。
sin(x)    返回数的正弦。
sqrt(x)    返回数的平方根。
tan(x)    返回角的正切。


-----------------------------------------------------------------------------------------------------------------------------
History对象：
History 对象包含用户（在浏览器窗口中）访问过的 URL。
History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。

length  返回浏览器历史列表中的 URL 数量。
back()    加载 history 列表中的前一个 URL。向后加载。
forward()    加载 history 列表中的下一个 URL。往前加载。
go()    加载 history 列表中的某个具体页面。go(1)往前加载，go(-1)退回前一个加载。
（相当于浏览器左上角的前进后退按钮）


-----------------------------------------------------------------------------------------------------------------------------
Location对象：Location 对象方法

location.assign(URL) -----------------------------加载URL，在本页面打开，区别于open，open打开的是一个新页面。
location.reload() ---------------------------------重新加载本页面，相当于refresh刷新。
location.replace(newURL)//注意与assign的区别
（例如你的页面是通过一个按钮click进来的，而且该按钮绑定的是assign函数，那么可以通过返回键回到原始带有click的界面，但如果是replace的话，打开的页面没有返回键，直接就是最开始的界面，即不能返回click键那一层）


-----------------------------------------------------------------------------------------------------------------------------
Dom对象：
访问 HTML 元素（节点）,访问 HTML 元素等同于访问节点,我们能够以不同的方式来访问 HTML 元素：
全局查找标签方法：
通过使用 getElementById() 方法 
通过使用 getElementsByTagName() 方法  ------------------Elements，复数形式，得到的是一个集合，可以通过索引如Array[0]得到想要的标签。
通过使用 getElementsByClassName() 方法 
通过使用 getElementsByName() 方法 
局部调用：
getElementsByTagName()

自身属性：
通过ele.innerHTML可以获取该元素节点的文本。且可以更改文本的内容，ele.innerHTML="text"。
（与innerHTML相似的是innerText，innerHTML显示的是ele下的所有标签以及text，而innerText显示的是ele下的text，但不包括标签）
attributes - 节点（元素）的属性节点
nodeType - 节点类型
nodeValue - 节点值
nodeName - 节点名称

导航属性:
parentNode - 节点（元素）的父节点 (推荐)
firstChild - 节点下第一个子元素
lastChild - 节点下最后一个子元素
childNodes - 节点（元素）的子节点 
推荐导航属性：
parentElement      ------------ 父节点标签元素
children                 ------------ 所有子标签
firstElementChild       --------- 第一个子标签元素
lastElementChild        --------- 最后一个子标签元素
nextElementtSibling      ------- 下一个兄弟标签元素
previousElementSibling  ------ 上一个兄弟标签元素

局部查找：
<div id="div1">
    <div class="div2">i am div2</div>
    <div name="yuan">i am div2</div>
    <div id="div3">i am div2</div>
    <p>hello p</p>
</div>

<script>
//   var div1=document.getElementById("div1");
////支持;
//   var ele= div1.getElementsByTagName("p");
//   alert(ele.length);
////支持
//   var ele2=div1.getElementsByClassName("div2");
//   alert(ele2.length);
////不支持
//   var ele3=div1.getElementById("div3");
//   alert(ele3.length);
////不支持
//   var ele4=div1.getElementsByName("yuan");
//   alert(ele4.length)
</script>

如果想找到你点击的这个标签，可以使用this，例如<p onclick="func（this）>"，点击后执行func函数，传进去一个参数this，this就是这个p标签，然后你可以在定义func的时候使用这个p标签。


-----------------------------------------------------------------------------------------------------------------------------
HTML DOM Event（事件）：
onclick        当用户点击某个对象时调用的事件句柄。
ondblclick     当用户双击某个对象时调用的事件句柄。
onfocus        元素获得焦点。               //练习：输入框
onblur         元素失去焦点。               应用场景：用于表单验证,用户离开某个输入框时,代表已经输入完了,我们可以对它进行验证.
onchange       域的内容被改变。             应用场景：通常用于表单元素,当元素内容被改变时触发.（三级联动）
onkeydown      某个键盘按键被按下。          应用场景: 当用户在最后一个输入框按下回车按键时,表单提交.
onkeypress     某个键盘按键被按下并松开。
onkeyup        某个键盘按键被松开。
onload         一张页面或一幅图像完成加载。将onload放在<body>标签里面，即<body onload="func">意思是body标签执行完成后（也就是页面加载完成时）立即执行func函数。
onmousedown    鼠标按钮被按下。
onmousemove    鼠标被移动。
onmouseout     鼠标从某元素移开。
onmouseover    鼠标移到某元素之上。
onmouseleave   鼠标从元素离开
onselect      文本被选中。
onsubmit      确认按钮被点击。是当表单在提交时触发. 该属性也只能给form元素使用.应用场景: 在表单提交前验证用户输入是否正确.如果验证失败.在该方法中我们应该阻止表单的提交.
（在form表单里面，当你点击submit之后，首先执行的是submit="func"里面的func函数，然后再执行提交操作，你可以在func函数里面加上判断，如果判断数据出现错误，不应该被提交时，加上一个return false，这样数据就不会被提交）

在函数后边加行一个参数，意思是将发生的event记录下来，放在传进去的参数里面，比如，func(e)，那么e就存储着信息。注意这个e不能写在标签里面，<p onclick="func(e)">里面的e是参数，不是事件对象e。事件对象e需写在script的function f（e）里面。
var ele=document.getElementsByClassName("inner")[0];
    ele.onclick=function (e) {
        alert("inner");
        e.stopPropagation() ----------------执行完本函数不再执行另外的函数，阻止向外传播。
    }


传播实例：
<div id="abc_1" style="border:1px solid red;width:300px;height:300px;">
        <div id="abc_2" style="border:1px solid red;width:200px;height:200px;">
        
        </div>
    </div>
    <script type="text/javascript">
    document.getElementById("abc_1").onclick=function(){
        alert('111');
    }
    document.getElementById("abc_2").onclick=function(event){
        alert('222');
        event.stopPropagation(); //阻止事件向外层div传播.
    }
    
</script>


------------------------------------------------------------------------------------------------------------------------------
通过script的标签增删改查：
function add() {
    var ele=document.createElement("p"); ----------------------------创建一个p标签。
    ele.innerHTML="hello p"; ------------------------------------------给p标签添加文本。innerHTML不但可以添加文本，还可以增加标签。innerText只能添加文本。
    var father=document.getElementsByClassName("div1")[0]; ------找到父级标签。
    father.appendChild(ele) --------------------------------------------通过父级标签添加子级p标签。
}
function del() {
    var father=document.getElementsByClassName("div1")[0];-------找到父级标签。
    var son=father.getElementsByTagName("p")[0];-------------------找到需要删除的子级标签。
    father.removeChild(son)---------------------------------------------删除子级标签。
}
function change() {
    var img=document.createElement("img");--------------------------创建一个img标签。
    img.src="scau.png";--------------------------------------------------给img标签增加内容。
    (上面这一步的另一种方法：img.setAttribute("src","scau.png"))
    var ele=document.getElementsByTagName("p")[0];-----------------找到被替换标签。
    var father=document.getElementsByClassName("div1")[0];---------找到父级标签
    father.replaceChild(img,ele)-------------------------------------------替换标签。
}
使用setAttribute();方法修改属性。          
使用innerHTML属性修改元素的内容。

ele的style属性：
ele.style.color="red"
ele.style.fontSize="10px"

改变 HTML 属性 
        elementNode.setAttribute(name,value)
        elementNode.getAttribute(name)<-------------->elementNode.value(DHTML)
创建新的 HTML 元素 
        createElement(name)
删除已有的 HTML 元素 
        elementNode.removeChild(node)
关于class的操作 
        elementNode.className---------------------------输出类名，如果有多个类名，一同输出。
        elementNode.classList------------------------------以列表的形式输出类名。
        elementNode.classList.add（"name"）-------------增加类名。
        elementNode.classList.remove（"name"）---------删除类名。


----------------------------------------------------------------------------------------------------------------------------
