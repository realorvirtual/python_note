类：把一类事物的相同的特征和动作整合到一起就是类，类是一个抽象的概念。
对象：就是基于类而创建的一个具体的事物（具体存在的），也是特征和动作整合到一起。
例如：
def school(name,addr,type):
    def kao_shi(school):
        print("%s学校正在考试"%school["name"])
    def zhao_sheng(school):
        print("%s %s正在招生"%(school["type"],school["name"]))
    def init(name,addr,type):
        sch={"name":name,
                "addr":addr,
                "type":type,
                "kao_shi":kao_shi,
                "zhao_sheng":zhao_sheng}
        return sch
    return init(name,addr,type)
定义类的时候，类名要首字母大写。
调用类的方法和属性，实际上时在调用类的属性字典，即调用 Lei.__dict__====(这是个字典，里面有属性，有函数，可以用__dict__["方法名称"]来调用)。

类的属性：
class.__name__类名。
class.__doc__相当于注释，比如在类的开头打上一段字符串"这是个类"，那么通过这个函数__doc__就可以打印出这句话。
class.__bases__类的共同祖先，一般是object。
class.__dict__类的字典。

class aa：
 def __init__(name,age,gender):========一旦实例化就会执行，比如你下面的代码中有一行print()，那么执行bb=aa()的时候，函数会执行print。
    self.name=name
    self.age=age
    self.gender=gender
在class里面定义一个__init__相当于创建查看了一个默认字典。创建实例调用时可以直接这样写: aa.name。也可以用aa.函数名（）来调用函数。
类属性的增删改查：
1.查看类属性：class.属性名
2.修改属性：class.属性名="新属性名"
3.增加属性：class.定义属性名=“属性内容”
4.删除属性：del class.属性名7 
实例属性的增删改查：
1.查看属性字典：class.__dict__
2.增加属性：class.属性名="属性内容"
3.实例只有数据属性，所以不能增加函数属性，实例调用的函数是类的函数属性，可以通过给类增加函数属性来达到给实例增加函数属性的目的。
4.（其实可以强行给实例增加函数，但一般不这么干）
5.修改：example.age=18， 注意：不要修改底层的属性字典，像这样example.__dict__["age"]=18
6.删除:del example.age


@property
def abc(self):
在实例调用该函数时，不需要在函数名后面写上（）便可以直接运行函数，且类不能调用该函数（不报错，但不显示）。与实例绑定。

@classmethod
def abc(cls):      ========括号里面的cls类似于self，表示该方法用于给类调用。与类绑定。

@staticmethod
类的工具包，不与实例或者类绑定。
在def abc(a,b,c)的括号里面不需要填入self，该函数可以被类和实例调用。

组合：
大类里面方小类

面向对象编程的三大特性：
继承，多态，封装

类的继承：
class abc(父类1)：===单继承    abc(父类1，父类2)：===多继承
子类可以调用父类的方法和属性。

如果同时定义了几个类，他们有共同的特点，比如跑步，吃饭等，那么就可以把他们的相同点提取出来做成一个新的类，在需要这些方法的时候直接继承这个类就可以了。

super（）：调用父类的__init__属性
语法格式：super(子类，self).__init__(参数1，参数2，…)
效果等同于：父类名称.__init__(self,参数1，参数2，…)

接口继承：
规定子类必须拥有父类的方法。父类只定义了函数，但不具体写上函数的内容，当子类继承这个函数后必须对函数进行具体化才能有效果。
（接口是指基类（接口类）里面定义的函数）
但要是子类不去定义这个函数的话，继承就没有效果，这时候继承跟不继承都没啥区别。而且只是你想着子类必须去具体化父类的方法，实际上子类并没有被限制到，它可以不去具体化这个函数。

如果我想要子类在继承父类之后必须具体化函数（具体化不一定是要写上具体执行的方法，可以用pass带过，这样做的目的是让子类知道你应该重新去写这个函数，但什么时候写没关系）

import abc
class All_file(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def 函数
    @abc.abstractmethod
    def 函数
如果子类继承了这个父类All_file，那么子类就必须在自己的内部重新写上一遍@abc.abstractmethod下面的这个函数，否者，子类在实例化的时候就会报错。


类的继承顺序：
新式类（继承object的类，其子级也是新式类）：
(python3默认所有的类都是新式类)
              ------D------F
   ------B
A                                           在左边这个继承顺序中，A是最大的父级，F是最小的子级，继承顺序为F->D->B->E->C->A.（广度优先）
   ------C
              ------E------F
经典类（不继承object的类，其子级也是经典类）：A是最大的父级，F是最小的子级，继承顺序为F->D->B->A->E->C.（深度优先）

上下文管理协议：
在类Open里面定义了__enter__()，__exit__()
with Open() as f:
    print("1230")
那么在with这一行就会触发__enter__()，然后执行print，当with内部的函数执行完成后就会触发__exit__()。
（注意，此时的f是个空对象，它没有任何赋值，那怎么办呢？你需要在def __enter__()下面创建一个返回值，return self，相当于把实例self赋予给了f，此时的f就是Open的一个实例）
（with函数还可以直接使用且不用赋值给f，即可以直接这样使用：with Open（）：    ）
（__exit__(self,exc_type,exc_val,exc_tb)括号里面的后三个参数是获取错误信息的，如果在执行with的过程中出现了错误，就可以在__exit__()的后面添加return=True，这样就可利用print(exc_type来打印出错误信息了)）
（异常也会触发__exit__的运行，且它会把异常吃掉，从而不至于使得后面的代码因异常而无法执行）


类的静态属性与动态属性：
calss aa():
    name1=10
    print(name1)

    def __init__(self):
        self.name2=20
        print(self.name2)

aa() ----------------打印10，20
aa() ----------------打印20
原因：当一个程序执行时，类aa会从上到下执行一次，并将静态属性（name1，print(name1)）永久存入内存中，因此在第二次实例化aa时，静态属性不再加载，而是直接执行init函数，并加载里面的动态属性。

